from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk

import json
import pickle

# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD = "EIDVlxEubwqt29bNARhiIihb"

# Found in the 'Manage Deployment' page
CLOUD_ID = "int-Elligent_Chatbot:dXMtY2VudHJhbDEuZ2NwLmNsb3VkLmVzLmlvJDkxY2RlMWY1ODE4NDRiYjU4MWE5ODYzMjI2NzE0N2M0JDIyZTE2YTc2M2U1NDQ3ZjliODgzNmE2MjFmNDYxZTQ5"

# Create the client instance
client = Elasticsearch(
    cloud_id=CLOUD_ID,
    basic_auth=("elastic", ELASTIC_PASSWORD)
)

# Successful response!
# print(client.info())

# client.delete(index="reddit", id=1)

# # loading and indexing data
# with open('data/reddit_data_updated.pkl', 'rb') as handle:
#     data = pickle.load(handle)
#     data_dict = data.to_dict(orient = "records")

# bulk(client, data_dict, index='reddit', raise_on_error=True)

# getting 1 doc
# resp = client.get(index="reddit", id='103q1d')

# # print(resp['_source'])


def reddit_es_query(query, topic_flag, topic="", past_queries=""):
    # Topic preprocessing
    if topic_flag == "True":    # Cheking if need topic search
        response = client.search(index='reddit', body={
            "query": {
                "bool": {
                    "must": [
                        {
                            "multi_match": {
                                "query": query,
                                "fields": ["title", "selftext","entities"]
                            }
                        },
                        {
                            "match": {
                                "topic": topic
                            }
                        }
                    ]
                }
            }})

    else:
        # get query entities and search
        response = client.search(index='reddit', body={
            "query": {
                "multi_match": {
                    "query": query,
                    "fields": ["title", "selftext", "entities"]
                }
            }})

    selftexts = []
    for doc in response['hits']['hits']:
        selftexts.append(doc['_source']['selftext'])

    return selftexts